/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package memdb.autogen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IndexedDatabase {

  public interface Iface {

    /**
     * Get the current value of a record identified by the given key.
     * 
     * @param key
     */
    public Record getRecord(String key) throws RecordNotFound, ServiceException, org.apache.thrift.TException;

    /**
     * Update a record with the given value.
     * A record update merges with an existing record value on a per-column basis:
     * columns with higher timestamps win merge conflicts.
     * 
     * This call should also update any relevant indexes.
     * 
     * @param key
     * @param value
     */
    public void setRecord(String key, Record value) throws ServiceException, RecordNotFound, org.apache.thrift.TException;

    /**
     * Query the given index. Return at most pageLimit records.
     * Use the given ScanContinuation as a starting point for the scan.
     * 
     * @param indexId
     * @param pageLimit
     * @param scanContinuation
     */
    public QueryIndexResult queryIndex(short indexId, int pageLimit, ScanContinuation scanContinuation) throws InvalidIndex, ServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRecord(String key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecord_call> resultHandler) throws org.apache.thrift.TException;

    public void setRecord(String key, Record value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setRecord_call> resultHandler) throws org.apache.thrift.TException;

    public void queryIndex(short indexId, int pageLimit, ScanContinuation scanContinuation, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryIndex_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Record getRecord(String key) throws RecordNotFound, ServiceException, org.apache.thrift.TException
    {
      send_getRecord(key);
      return recv_getRecord();
    }

    public void send_getRecord(String key) throws org.apache.thrift.TException
    {
      getRecord_args args = new getRecord_args();
      args.setKey(key);
      sendBase("getRecord", args);
    }

    public Record recv_getRecord() throws RecordNotFound, ServiceException, org.apache.thrift.TException
    {
      getRecord_result result = new getRecord_result();
      receiveBase(result, "getRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecord failed: unknown result");
    }

    public void setRecord(String key, Record value) throws ServiceException, RecordNotFound, org.apache.thrift.TException
    {
      send_setRecord(key, value);
      recv_setRecord();
    }

    public void send_setRecord(String key, Record value) throws org.apache.thrift.TException
    {
      setRecord_args args = new setRecord_args();
      args.setKey(key);
      args.setValue(value);
      sendBase("setRecord", args);
    }

    public void recv_setRecord() throws ServiceException, RecordNotFound, org.apache.thrift.TException
    {
      setRecord_result result = new setRecord_result();
      receiveBase(result, "setRecord");
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      return;
    }

    public QueryIndexResult queryIndex(short indexId, int pageLimit, ScanContinuation scanContinuation) throws InvalidIndex, ServiceException, org.apache.thrift.TException
    {
      send_queryIndex(indexId, pageLimit, scanContinuation);
      return recv_queryIndex();
    }

    public void send_queryIndex(short indexId, int pageLimit, ScanContinuation scanContinuation) throws org.apache.thrift.TException
    {
      queryIndex_args args = new queryIndex_args();
      args.setIndexId(indexId);
      args.setPageLimit(pageLimit);
      args.setScanContinuation(scanContinuation);
      sendBase("queryIndex", args);
    }

    public QueryIndexResult recv_queryIndex() throws InvalidIndex, ServiceException, org.apache.thrift.TException
    {
      queryIndex_result result = new queryIndex_result();
      receiveBase(result, "queryIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalidIndex != null) {
        throw result.invalidIndex;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryIndex failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRecord(String key, org.apache.thrift.async.AsyncMethodCallback<getRecord_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecord_call method_call = new getRecord_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public getRecord_call(String key, org.apache.thrift.async.AsyncMethodCallback<getRecord_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecord_args args = new getRecord_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Record getResult() throws RecordNotFound, ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecord();
      }
    }

    public void setRecord(String key, Record value, org.apache.thrift.async.AsyncMethodCallback<setRecord_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRecord_call method_call = new setRecord_call(key, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private Record value;
      public setRecord_call(String key, Record value, org.apache.thrift.async.AsyncMethodCallback<setRecord_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRecord_args args = new setRecord_args();
        args.setKey(key);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ServiceException, RecordNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setRecord();
      }
    }

    public void queryIndex(short indexId, int pageLimit, ScanContinuation scanContinuation, org.apache.thrift.async.AsyncMethodCallback<queryIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryIndex_call method_call = new queryIndex_call(indexId, pageLimit, scanContinuation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short indexId;
      private int pageLimit;
      private ScanContinuation scanContinuation;
      public queryIndex_call(short indexId, int pageLimit, ScanContinuation scanContinuation, org.apache.thrift.async.AsyncMethodCallback<queryIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indexId = indexId;
        this.pageLimit = pageLimit;
        this.scanContinuation = scanContinuation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryIndex_args args = new queryIndex_args();
        args.setIndexId(indexId);
        args.setPageLimit(pageLimit);
        args.setScanContinuation(scanContinuation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryIndexResult getResult() throws InvalidIndex, ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryIndex();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRecord", new getRecord());
      processMap.put("setRecord", new setRecord());
      processMap.put("queryIndex", new queryIndex());
      return processMap;
    }

    private static class getRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecord_args> {
      public getRecord() {
        super("getRecord");
      }

      protected getRecord_args getEmptyArgsInstance() {
        return new getRecord_args();
      }

      protected getRecord_result getResult(I iface, getRecord_args args) throws org.apache.thrift.TException {
        getRecord_result result = new getRecord_result();
        try {
          result.success = iface.getRecord(args.key);
        } catch (RecordNotFound notFound) {
          result.notFound = notFound;
        } catch (ServiceException serviceException) {
          result.serviceException = serviceException;
        }
        return result;
      }
    }

    private static class setRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRecord_args> {
      public setRecord() {
        super("setRecord");
      }

      protected setRecord_args getEmptyArgsInstance() {
        return new setRecord_args();
      }

      protected setRecord_result getResult(I iface, setRecord_args args) throws org.apache.thrift.TException {
        setRecord_result result = new setRecord_result();
        try {
          iface.setRecord(args.key, args.value);
        } catch (ServiceException serviceException) {
          result.serviceException = serviceException;
        } catch (RecordNotFound notFound) {
          result.notFound = notFound;
        }
        return result;
      }
    }

    private static class queryIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryIndex_args> {
      public queryIndex() {
        super("queryIndex");
      }

      protected queryIndex_args getEmptyArgsInstance() {
        return new queryIndex_args();
      }

      protected queryIndex_result getResult(I iface, queryIndex_args args) throws org.apache.thrift.TException {
        queryIndex_result result = new queryIndex_result();
        try {
          result.success = iface.queryIndex(args.indexId, args.pageLimit, args.scanContinuation);
        } catch (InvalidIndex invalidIndex) {
          result.invalidIndex = invalidIndex;
        } catch (ServiceException serviceException) {
          result.serviceException = serviceException;
        }
        return result;
      }
    }

  }

  public static class getRecord_args implements org.apache.thrift.TBase<getRecord_args, getRecord_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecord_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecord_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecord_args.class, metaDataMap);
    }

    public getRecord_args() {
    }

    public getRecord_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecord_args(getRecord_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getRecord_args deepCopy() {
      return new getRecord_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public getRecord_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecord_args)
        return this.equals((getRecord_args)that);
      return false;
    }

    public boolean equals(getRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecord_args typedOther = (getRecord_args)other;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecord_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getRecord_argsStandardScheme getScheme() {
        return new getRecord_argsStandardScheme();
      }
    }

    private static class getRecord_argsStandardScheme extends StandardScheme<getRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getRecord_argsTupleScheme getScheme() {
        return new getRecord_argsTupleScheme();
      }
    }

    private static class getRecord_argsTupleScheme extends TupleScheme<getRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class getRecord_result implements org.apache.thrift.TBase<getRecord_result, getRecord_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecord_resultTupleSchemeFactory());
    }

    public Record success; // required
    public RecordNotFound notFound; // required
    public ServiceException serviceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NOT_FOUND((short)1, "notFound"),
      SERVICE_EXCEPTION((short)2, "serviceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NOT_FOUND
            return NOT_FOUND;
          case 2: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Record.class)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecord_result.class, metaDataMap);
    }

    public getRecord_result() {
    }

    public getRecord_result(
      Record success,
      RecordNotFound notFound,
      ServiceException serviceException)
    {
      this();
      this.success = success;
      this.notFound = notFound;
      this.serviceException = serviceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecord_result(getRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new Record(other.success);
      }
      if (other.isSetNotFound()) {
        this.notFound = new RecordNotFound(other.notFound);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new ServiceException(other.serviceException);
      }
    }

    public getRecord_result deepCopy() {
      return new getRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.notFound = null;
      this.serviceException = null;
    }

    public Record getSuccess() {
      return this.success;
    }

    public getRecord_result setSuccess(Record success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RecordNotFound getNotFound() {
      return this.notFound;
    }

    public getRecord_result setNotFound(RecordNotFound notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public ServiceException getServiceException() {
      return this.serviceException;
    }

    public getRecord_result setServiceException(ServiceException serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Record)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((RecordNotFound)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NOT_FOUND:
        return getNotFound();

      case SERVICE_EXCEPTION:
        return getServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NOT_FOUND:
        return isSetNotFound();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecord_result)
        return this.equals((getRecord_result)that);
      return false;
    }

    public boolean equals(getRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecord_result typedOther = (getRecord_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getRecord_resultStandardScheme getScheme() {
        return new getRecord_resultStandardScheme();
      }
    }

    private static class getRecord_resultStandardScheme extends StandardScheme<getRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Record();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new RecordNotFound();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new ServiceException();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getRecord_resultTupleScheme getScheme() {
        return new getRecord_resultTupleScheme();
      }
    }

    private static class getRecord_resultTupleScheme extends TupleScheme<getRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetServiceException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Record();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notFound = new RecordNotFound();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serviceException = new ServiceException();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class setRecord_args implements org.apache.thrift.TBase<setRecord_args, setRecord_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRecord_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRecord_argsTupleSchemeFactory());
    }

    public String key; // required
    public Record value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      VALUE((short)2, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Record.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRecord_args.class, metaDataMap);
    }

    public setRecord_args() {
    }

    public setRecord_args(
      String key,
      Record value)
    {
      this();
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRecord_args(setRecord_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = new Record(other.value);
      }
    }

    public setRecord_args deepCopy() {
      return new setRecord_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.value = null;
    }

    public String getKey() {
      return this.key;
    }

    public setRecord_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public Record getValue() {
      return this.value;
    }

    public setRecord_args setValue(Record value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Record)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRecord_args)
        return this.equals((setRecord_args)that);
      return false;
    }

    public boolean equals(setRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRecord_args typedOther = (setRecord_args)other;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRecord_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRecord_argsStandardSchemeFactory implements SchemeFactory {
      public setRecord_argsStandardScheme getScheme() {
        return new setRecord_argsStandardScheme();
      }
    }

    private static class setRecord_argsStandardScheme extends StandardScheme<setRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.value = new Record();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRecord_argsTupleSchemeFactory implements SchemeFactory {
      public setRecord_argsTupleScheme getScheme() {
        return new setRecord_argsTupleScheme();
      }
    }

    private static class setRecord_argsTupleScheme extends TupleScheme<setRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          struct.value.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = new Record();
          struct.value.read(iprot);
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class setRecord_result implements org.apache.thrift.TBase<setRecord_result, setRecord_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRecord_result");

    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRecord_resultTupleSchemeFactory());
    }

    public ServiceException serviceException; // required
    public RecordNotFound notFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_EXCEPTION((short)1, "serviceException"),
      NOT_FOUND((short)2, "notFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // NOT_FOUND
            return NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRecord_result.class, metaDataMap);
    }

    public setRecord_result() {
    }

    public setRecord_result(
      ServiceException serviceException,
      RecordNotFound notFound)
    {
      this();
      this.serviceException = serviceException;
      this.notFound = notFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRecord_result(setRecord_result other) {
      if (other.isSetServiceException()) {
        this.serviceException = new ServiceException(other.serviceException);
      }
      if (other.isSetNotFound()) {
        this.notFound = new RecordNotFound(other.notFound);
      }
    }

    public setRecord_result deepCopy() {
      return new setRecord_result(this);
    }

    @Override
    public void clear() {
      this.serviceException = null;
      this.notFound = null;
    }

    public ServiceException getServiceException() {
      return this.serviceException;
    }

    public setRecord_result setServiceException(ServiceException serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public RecordNotFound getNotFound() {
      return this.notFound;
    }

    public setRecord_result setNotFound(RecordNotFound notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((ServiceException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((RecordNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_EXCEPTION:
        return getServiceException();

      case NOT_FOUND:
        return getNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case NOT_FOUND:
        return isSetNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRecord_result)
        return this.equals((setRecord_result)that);
      return false;
    }

    public boolean equals(setRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRecord_result typedOther = (setRecord_result)other;

      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRecord_result(");
      boolean first = true;

      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRecord_resultStandardSchemeFactory implements SchemeFactory {
      public setRecord_resultStandardScheme getScheme() {
        return new setRecord_resultStandardScheme();
      }
    }

    private static class setRecord_resultStandardScheme extends StandardScheme<setRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new ServiceException();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new RecordNotFound();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRecord_resultTupleSchemeFactory implements SchemeFactory {
      public setRecord_resultTupleScheme getScheme() {
        return new setRecord_resultTupleScheme();
      }
    }

    private static class setRecord_resultTupleScheme extends TupleScheme<setRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceException()) {
          optionals.set(0);
        }
        if (struct.isSetNotFound()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serviceException = new ServiceException();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notFound = new RecordNotFound();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
      }
    }

  }

  public static class queryIndex_args implements org.apache.thrift.TBase<queryIndex_args, queryIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIndex_args");

    private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("indexId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageLimit", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_CONTINUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("scanContinuation", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIndex_argsTupleSchemeFactory());
    }

    public short indexId; // required
    public int pageLimit; // required
    public ScanContinuation scanContinuation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX_ID((short)1, "indexId"),
      PAGE_LIMIT((short)2, "pageLimit"),
      SCAN_CONTINUATION((short)3, "scanContinuation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX_ID
            return INDEX_ID;
          case 2: // PAGE_LIMIT
            return PAGE_LIMIT;
          case 3: // SCAN_CONTINUATION
            return SCAN_CONTINUATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEXID_ISSET_ID = 0;
    private static final int __PAGELIMIT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("indexId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PAGE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("pageLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCAN_CONTINUATION, new org.apache.thrift.meta_data.FieldMetaData("scanContinuation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanContinuation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIndex_args.class, metaDataMap);
    }

    public queryIndex_args() {
    }

    public queryIndex_args(
      short indexId,
      int pageLimit,
      ScanContinuation scanContinuation)
    {
      this();
      this.indexId = indexId;
      setIndexIdIsSet(true);
      this.pageLimit = pageLimit;
      setPageLimitIsSet(true);
      this.scanContinuation = scanContinuation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIndex_args(queryIndex_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.indexId = other.indexId;
      this.pageLimit = other.pageLimit;
      if (other.isSetScanContinuation()) {
        this.scanContinuation = new ScanContinuation(other.scanContinuation);
      }
    }

    public queryIndex_args deepCopy() {
      return new queryIndex_args(this);
    }

    @Override
    public void clear() {
      setIndexIdIsSet(false);
      this.indexId = 0;
      setPageLimitIsSet(false);
      this.pageLimit = 0;
      this.scanContinuation = null;
    }

    public short getIndexId() {
      return this.indexId;
    }

    public queryIndex_args setIndexId(short indexId) {
      this.indexId = indexId;
      setIndexIdIsSet(true);
      return this;
    }

    public void unsetIndexId() {
      __isset_bit_vector.clear(__INDEXID_ISSET_ID);
    }

    /** Returns true if field indexId is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexId() {
      return __isset_bit_vector.get(__INDEXID_ISSET_ID);
    }

    public void setIndexIdIsSet(boolean value) {
      __isset_bit_vector.set(__INDEXID_ISSET_ID, value);
    }

    public int getPageLimit() {
      return this.pageLimit;
    }

    public queryIndex_args setPageLimit(int pageLimit) {
      this.pageLimit = pageLimit;
      setPageLimitIsSet(true);
      return this;
    }

    public void unsetPageLimit() {
      __isset_bit_vector.clear(__PAGELIMIT_ISSET_ID);
    }

    /** Returns true if field pageLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetPageLimit() {
      return __isset_bit_vector.get(__PAGELIMIT_ISSET_ID);
    }

    public void setPageLimitIsSet(boolean value) {
      __isset_bit_vector.set(__PAGELIMIT_ISSET_ID, value);
    }

    public ScanContinuation getScanContinuation() {
      return this.scanContinuation;
    }

    public queryIndex_args setScanContinuation(ScanContinuation scanContinuation) {
      this.scanContinuation = scanContinuation;
      return this;
    }

    public void unsetScanContinuation() {
      this.scanContinuation = null;
    }

    /** Returns true if field scanContinuation is set (has been assigned a value) and false otherwise */
    public boolean isSetScanContinuation() {
      return this.scanContinuation != null;
    }

    public void setScanContinuationIsSet(boolean value) {
      if (!value) {
        this.scanContinuation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX_ID:
        if (value == null) {
          unsetIndexId();
        } else {
          setIndexId((Short)value);
        }
        break;

      case PAGE_LIMIT:
        if (value == null) {
          unsetPageLimit();
        } else {
          setPageLimit((Integer)value);
        }
        break;

      case SCAN_CONTINUATION:
        if (value == null) {
          unsetScanContinuation();
        } else {
          setScanContinuation((ScanContinuation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX_ID:
        return Short.valueOf(getIndexId());

      case PAGE_LIMIT:
        return Integer.valueOf(getPageLimit());

      case SCAN_CONTINUATION:
        return getScanContinuation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX_ID:
        return isSetIndexId();
      case PAGE_LIMIT:
        return isSetPageLimit();
      case SCAN_CONTINUATION:
        return isSetScanContinuation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIndex_args)
        return this.equals((queryIndex_args)that);
      return false;
    }

    public boolean equals(queryIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_indexId = true;
      boolean that_present_indexId = true;
      if (this_present_indexId || that_present_indexId) {
        if (!(this_present_indexId && that_present_indexId))
          return false;
        if (this.indexId != that.indexId)
          return false;
      }

      boolean this_present_pageLimit = true;
      boolean that_present_pageLimit = true;
      if (this_present_pageLimit || that_present_pageLimit) {
        if (!(this_present_pageLimit && that_present_pageLimit))
          return false;
        if (this.pageLimit != that.pageLimit)
          return false;
      }

      boolean this_present_scanContinuation = true && this.isSetScanContinuation();
      boolean that_present_scanContinuation = true && that.isSetScanContinuation();
      if (this_present_scanContinuation || that_present_scanContinuation) {
        if (!(this_present_scanContinuation && that_present_scanContinuation))
          return false;
        if (!this.scanContinuation.equals(that.scanContinuation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryIndex_args typedOther = (queryIndex_args)other;

      lastComparison = Boolean.valueOf(isSetIndexId()).compareTo(typedOther.isSetIndexId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexId, typedOther.indexId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageLimit()).compareTo(typedOther.isSetPageLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageLimit, typedOther.pageLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScanContinuation()).compareTo(typedOther.isSetScanContinuation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanContinuation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanContinuation, typedOther.scanContinuation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIndex_args(");
      boolean first = true;

      sb.append("indexId:");
      sb.append(this.indexId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageLimit:");
      sb.append(this.pageLimit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scanContinuation:");
      if (this.scanContinuation == null) {
        sb.append("null");
      } else {
        sb.append(this.scanContinuation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryIndex_argsStandardScheme getScheme() {
        return new queryIndex_argsStandardScheme();
      }
    }

    private static class queryIndex_argsStandardScheme extends StandardScheme<queryIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.indexId = iprot.readI16();
                struct.setIndexIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageLimit = iprot.readI32();
                struct.setPageLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCAN_CONTINUATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scanContinuation = new ScanContinuation();
                struct.scanContinuation.read(iprot);
                struct.setScanContinuationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI16(struct.indexId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.pageLimit);
        oprot.writeFieldEnd();
        if (struct.scanContinuation != null) {
          oprot.writeFieldBegin(SCAN_CONTINUATION_FIELD_DESC);
          struct.scanContinuation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryIndex_argsTupleScheme getScheme() {
        return new queryIndex_argsTupleScheme();
      }
    }

    private static class queryIndex_argsTupleScheme extends TupleScheme<queryIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIndexId()) {
          optionals.set(0);
        }
        if (struct.isSetPageLimit()) {
          optionals.set(1);
        }
        if (struct.isSetScanContinuation()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIndexId()) {
          oprot.writeI16(struct.indexId);
        }
        if (struct.isSetPageLimit()) {
          oprot.writeI32(struct.pageLimit);
        }
        if (struct.isSetScanContinuation()) {
          struct.scanContinuation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.indexId = iprot.readI16();
          struct.setIndexIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageLimit = iprot.readI32();
          struct.setPageLimitIsSet(true);
        }
        if (incoming.get(2)) {
          struct.scanContinuation = new ScanContinuation();
          struct.scanContinuation.read(iprot);
          struct.setScanContinuationIsSet(true);
        }
      }
    }

  }

  public static class queryIndex_result implements org.apache.thrift.TBase<queryIndex_result, queryIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidIndex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIndex_resultTupleSchemeFactory());
    }

    public QueryIndexResult success; // required
    public InvalidIndex invalidIndex; // required
    public ServiceException serviceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID_INDEX((short)1, "invalidIndex"),
      SERVICE_EXCEPTION((short)2, "serviceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID_INDEX
            return INVALID_INDEX;
          case 2: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryIndexResult.class)));
      tmpMap.put(_Fields.INVALID_INDEX, new org.apache.thrift.meta_data.FieldMetaData("invalidIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIndex_result.class, metaDataMap);
    }

    public queryIndex_result() {
    }

    public queryIndex_result(
      QueryIndexResult success,
      InvalidIndex invalidIndex,
      ServiceException serviceException)
    {
      this();
      this.success = success;
      this.invalidIndex = invalidIndex;
      this.serviceException = serviceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIndex_result(queryIndex_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryIndexResult(other.success);
      }
      if (other.isSetInvalidIndex()) {
        this.invalidIndex = new InvalidIndex(other.invalidIndex);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new ServiceException(other.serviceException);
      }
    }

    public queryIndex_result deepCopy() {
      return new queryIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.invalidIndex = null;
      this.serviceException = null;
    }

    public QueryIndexResult getSuccess() {
      return this.success;
    }

    public queryIndex_result setSuccess(QueryIndexResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidIndex getInvalidIndex() {
      return this.invalidIndex;
    }

    public queryIndex_result setInvalidIndex(InvalidIndex invalidIndex) {
      this.invalidIndex = invalidIndex;
      return this;
    }

    public void unsetInvalidIndex() {
      this.invalidIndex = null;
    }

    /** Returns true if field invalidIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidIndex() {
      return this.invalidIndex != null;
    }

    public void setInvalidIndexIsSet(boolean value) {
      if (!value) {
        this.invalidIndex = null;
      }
    }

    public ServiceException getServiceException() {
      return this.serviceException;
    }

    public queryIndex_result setServiceException(ServiceException serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryIndexResult)value);
        }
        break;

      case INVALID_INDEX:
        if (value == null) {
          unsetInvalidIndex();
        } else {
          setInvalidIndex((InvalidIndex)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INVALID_INDEX:
        return getInvalidIndex();

      case SERVICE_EXCEPTION:
        return getServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID_INDEX:
        return isSetInvalidIndex();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIndex_result)
        return this.equals((queryIndex_result)that);
      return false;
    }

    public boolean equals(queryIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_invalidIndex = true && this.isSetInvalidIndex();
      boolean that_present_invalidIndex = true && that.isSetInvalidIndex();
      if (this_present_invalidIndex || that_present_invalidIndex) {
        if (!(this_present_invalidIndex && that_present_invalidIndex))
          return false;
        if (!this.invalidIndex.equals(that.invalidIndex))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryIndex_result typedOther = (queryIndex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidIndex()).compareTo(typedOther.isSetInvalidIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidIndex, typedOther.invalidIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidIndex:");
      if (this.invalidIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidIndex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryIndex_resultStandardScheme getScheme() {
        return new queryIndex_resultStandardScheme();
      }
    }

    private static class queryIndex_resultStandardScheme extends StandardScheme<queryIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new QueryIndexResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidIndex = new InvalidIndex();
                struct.invalidIndex.read(iprot);
                struct.setInvalidIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new ServiceException();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidIndex != null) {
          oprot.writeFieldBegin(INVALID_INDEX_FIELD_DESC);
          struct.invalidIndex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryIndex_resultTupleScheme getScheme() {
        return new queryIndex_resultTupleScheme();
      }
    }

    private static class queryIndex_resultTupleScheme extends TupleScheme<queryIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidIndex()) {
          optionals.set(1);
        }
        if (struct.isSetServiceException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInvalidIndex()) {
          struct.invalidIndex.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new QueryIndexResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidIndex = new InvalidIndex();
          struct.invalidIndex.read(iprot);
          struct.setInvalidIndexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serviceException = new ServiceException();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
      }
    }

  }

}
