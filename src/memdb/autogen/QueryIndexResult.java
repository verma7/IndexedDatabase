/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package memdb.autogen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryIndexResult implements org.apache.thrift.TBase<QueryIndexResult, QueryIndexResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryIndexResult");

  private static final org.apache.thrift.protocol.TField MATCHING_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchingKeys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SCAN_CONTINUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("scanContinuation", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryIndexResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryIndexResultTupleSchemeFactory());
  }

  public List<String> matchingKeys; // required
  public ScanContinuation scanContinuation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCHING_KEYS((short)1, "matchingKeys"),
    SCAN_CONTINUATION((short)2, "scanContinuation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCHING_KEYS
          return MATCHING_KEYS;
        case 2: // SCAN_CONTINUATION
          return SCAN_CONTINUATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SCAN_CONTINUATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCHING_KEYS, new org.apache.thrift.meta_data.FieldMetaData("matchingKeys", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCAN_CONTINUATION, new org.apache.thrift.meta_data.FieldMetaData("scanContinuation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanContinuation.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryIndexResult.class, metaDataMap);
  }

  public QueryIndexResult() {
  }

  public QueryIndexResult(
    List<String> matchingKeys)
  {
    this();
    this.matchingKeys = matchingKeys;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryIndexResult(QueryIndexResult other) {
    if (other.isSetMatchingKeys()) {
      List<String> __this__matchingKeys = new ArrayList<String>();
      for (String other_element : other.matchingKeys) {
        __this__matchingKeys.add(other_element);
      }
      this.matchingKeys = __this__matchingKeys;
    }
    if (other.isSetScanContinuation()) {
      this.scanContinuation = new ScanContinuation(other.scanContinuation);
    }
  }

  public QueryIndexResult deepCopy() {
    return new QueryIndexResult(this);
  }

  @Override
  public void clear() {
    this.matchingKeys = null;
    this.scanContinuation = null;
  }

  public int getMatchingKeysSize() {
    return (this.matchingKeys == null) ? 0 : this.matchingKeys.size();
  }

  public java.util.Iterator<String> getMatchingKeysIterator() {
    return (this.matchingKeys == null) ? null : this.matchingKeys.iterator();
  }

  public void addToMatchingKeys(String elem) {
    if (this.matchingKeys == null) {
      this.matchingKeys = new ArrayList<String>();
    }
    this.matchingKeys.add(elem);
  }

  public List<String> getMatchingKeys() {
    return this.matchingKeys;
  }

  public QueryIndexResult setMatchingKeys(List<String> matchingKeys) {
    this.matchingKeys = matchingKeys;
    return this;
  }

  public void unsetMatchingKeys() {
    this.matchingKeys = null;
  }

  /** Returns true if field matchingKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchingKeys() {
    return this.matchingKeys != null;
  }

  public void setMatchingKeysIsSet(boolean value) {
    if (!value) {
      this.matchingKeys = null;
    }
  }

  public ScanContinuation getScanContinuation() {
    return this.scanContinuation;
  }

  public QueryIndexResult setScanContinuation(ScanContinuation scanContinuation) {
    this.scanContinuation = scanContinuation;
    return this;
  }

  public void unsetScanContinuation() {
    this.scanContinuation = null;
  }

  /** Returns true if field scanContinuation is set (has been assigned a value) and false otherwise */
  public boolean isSetScanContinuation() {
    return this.scanContinuation != null;
  }

  public void setScanContinuationIsSet(boolean value) {
    if (!value) {
      this.scanContinuation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCHING_KEYS:
      if (value == null) {
        unsetMatchingKeys();
      } else {
        setMatchingKeys((List<String>)value);
      }
      break;

    case SCAN_CONTINUATION:
      if (value == null) {
        unsetScanContinuation();
      } else {
        setScanContinuation((ScanContinuation)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCHING_KEYS:
      return getMatchingKeys();

    case SCAN_CONTINUATION:
      return getScanContinuation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCHING_KEYS:
      return isSetMatchingKeys();
    case SCAN_CONTINUATION:
      return isSetScanContinuation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryIndexResult)
      return this.equals((QueryIndexResult)that);
    return false;
  }

  public boolean equals(QueryIndexResult that) {
    if (that == null)
      return false;

    boolean this_present_matchingKeys = true && this.isSetMatchingKeys();
    boolean that_present_matchingKeys = true && that.isSetMatchingKeys();
    if (this_present_matchingKeys || that_present_matchingKeys) {
      if (!(this_present_matchingKeys && that_present_matchingKeys))
        return false;
      if (!this.matchingKeys.equals(that.matchingKeys))
        return false;
    }

    boolean this_present_scanContinuation = true && this.isSetScanContinuation();
    boolean that_present_scanContinuation = true && that.isSetScanContinuation();
    if (this_present_scanContinuation || that_present_scanContinuation) {
      if (!(this_present_scanContinuation && that_present_scanContinuation))
        return false;
      if (!this.scanContinuation.equals(that.scanContinuation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryIndexResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryIndexResult typedOther = (QueryIndexResult)other;

    lastComparison = Boolean.valueOf(isSetMatchingKeys()).compareTo(typedOther.isSetMatchingKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchingKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchingKeys, typedOther.matchingKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScanContinuation()).compareTo(typedOther.isSetScanContinuation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanContinuation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanContinuation, typedOther.scanContinuation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryIndexResult(");
    boolean first = true;

    sb.append("matchingKeys:");
    if (this.matchingKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.matchingKeys);
    }
    first = false;
    if (isSetScanContinuation()) {
      if (!first) sb.append(", ");
      sb.append("scanContinuation:");
      if (this.scanContinuation == null) {
        sb.append("null");
      } else {
        sb.append(this.scanContinuation);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (matchingKeys == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'matchingKeys' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryIndexResultStandardSchemeFactory implements SchemeFactory {
    public QueryIndexResultStandardScheme getScheme() {
      return new QueryIndexResultStandardScheme();
    }
  }

  private static class QueryIndexResultStandardScheme extends StandardScheme<QueryIndexResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryIndexResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATCHING_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.matchingKeys = new ArrayList<String>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  String _elem20; // required
                  _elem20 = iprot.readString();
                  struct.matchingKeys.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setMatchingKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCAN_CONTINUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scanContinuation = new ScanContinuation();
              struct.scanContinuation.read(iprot);
              struct.setScanContinuationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryIndexResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.matchingKeys != null) {
        oprot.writeFieldBegin(MATCHING_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.matchingKeys.size()));
          for (String _iter21 : struct.matchingKeys)
          {
            oprot.writeString(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.scanContinuation != null) {
        if (struct.isSetScanContinuation()) {
          oprot.writeFieldBegin(SCAN_CONTINUATION_FIELD_DESC);
          struct.scanContinuation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryIndexResultTupleSchemeFactory implements SchemeFactory {
    public QueryIndexResultTupleScheme getScheme() {
      return new QueryIndexResultTupleScheme();
    }
  }

  private static class QueryIndexResultTupleScheme extends TupleScheme<QueryIndexResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryIndexResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.matchingKeys.size());
        for (String _iter22 : struct.matchingKeys)
        {
          oprot.writeString(_iter22);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetScanContinuation()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetScanContinuation()) {
        struct.scanContinuation.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryIndexResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.matchingKeys = new ArrayList<String>(_list23.size);
        for (int _i24 = 0; _i24 < _list23.size; ++_i24)
        {
          String _elem25; // required
          _elem25 = iprot.readString();
          struct.matchingKeys.add(_elem25);
        }
      }
      struct.setMatchingKeysIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.scanContinuation = new ScanContinuation();
        struct.scanContinuation.read(iprot);
        struct.setScanContinuationIsSet(true);
      }
    }
  }

}

