/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package memdb.autogen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Predicate implements org.apache.thrift.TBase<Predicate, Predicate._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Predicate");

  private static final org.apache.thrift.protocol.TField COMPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("comparator", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField BIT_FIELD_DESC = new org.apache.thrift.protocol.TField("bit", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PredicateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PredicateTupleSchemeFactory());
  }

  /**
   * 
   * @see PredicateComparator
   */
  public PredicateComparator comparator; // required
  public short columnId; // required
  public short bit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PredicateComparator
     */
    COMPARATOR((short)1, "comparator"),
    COLUMN_ID((short)2, "columnId"),
    BIT((short)3, "bit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPARATOR
          return COMPARATOR;
        case 2: // COLUMN_ID
          return COLUMN_ID;
        case 3: // BIT
          return BIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNID_ISSET_ID = 0;
  private static final int __BIT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPARATOR, new org.apache.thrift.meta_data.FieldMetaData("comparator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PredicateComparator.class)));
    tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BIT, new org.apache.thrift.meta_data.FieldMetaData("bit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Predicate.class, metaDataMap);
  }

  public Predicate() {
  }

  public Predicate(
    PredicateComparator comparator,
    short columnId,
    short bit)
  {
    this();
    this.comparator = comparator;
    this.columnId = columnId;
    setColumnIdIsSet(true);
    this.bit = bit;
    setBitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Predicate(Predicate other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetComparator()) {
      this.comparator = other.comparator;
    }
    this.columnId = other.columnId;
    this.bit = other.bit;
  }

  public Predicate deepCopy() {
    return new Predicate(this);
  }

  @Override
  public void clear() {
    this.comparator = null;
    setColumnIdIsSet(false);
    this.columnId = 0;
    setBitIsSet(false);
    this.bit = 0;
  }

  /**
   * 
   * @see PredicateComparator
   */
  public PredicateComparator getComparator() {
    return this.comparator;
  }

  /**
   * 
   * @see PredicateComparator
   */
  public Predicate setComparator(PredicateComparator comparator) {
    this.comparator = comparator;
    return this;
  }

  public void unsetComparator() {
    this.comparator = null;
  }

  /** Returns true if field comparator is set (has been assigned a value) and false otherwise */
  public boolean isSetComparator() {
    return this.comparator != null;
  }

  public void setComparatorIsSet(boolean value) {
    if (!value) {
      this.comparator = null;
    }
  }

  public short getColumnId() {
    return this.columnId;
  }

  public Predicate setColumnId(short columnId) {
    this.columnId = columnId;
    setColumnIdIsSet(true);
    return this;
  }

  public void unsetColumnId() {
    __isset_bit_vector.clear(__COLUMNID_ISSET_ID);
  }

  /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnId() {
    return __isset_bit_vector.get(__COLUMNID_ISSET_ID);
  }

  public void setColumnIdIsSet(boolean value) {
    __isset_bit_vector.set(__COLUMNID_ISSET_ID, value);
  }

  public short getBit() {
    return this.bit;
  }

  public Predicate setBit(short bit) {
    this.bit = bit;
    setBitIsSet(true);
    return this;
  }

  public void unsetBit() {
    __isset_bit_vector.clear(__BIT_ISSET_ID);
  }

  /** Returns true if field bit is set (has been assigned a value) and false otherwise */
  public boolean isSetBit() {
    return __isset_bit_vector.get(__BIT_ISSET_ID);
  }

  public void setBitIsSet(boolean value) {
    __isset_bit_vector.set(__BIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPARATOR:
      if (value == null) {
        unsetComparator();
      } else {
        setComparator((PredicateComparator)value);
      }
      break;

    case COLUMN_ID:
      if (value == null) {
        unsetColumnId();
      } else {
        setColumnId((Short)value);
      }
      break;

    case BIT:
      if (value == null) {
        unsetBit();
      } else {
        setBit((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPARATOR:
      return getComparator();

    case COLUMN_ID:
      return Short.valueOf(getColumnId());

    case BIT:
      return Short.valueOf(getBit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPARATOR:
      return isSetComparator();
    case COLUMN_ID:
      return isSetColumnId();
    case BIT:
      return isSetBit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Predicate)
      return this.equals((Predicate)that);
    return false;
  }

  public boolean equals(Predicate that) {
    if (that == null)
      return false;

    boolean this_present_comparator = true && this.isSetComparator();
    boolean that_present_comparator = true && that.isSetComparator();
    if (this_present_comparator || that_present_comparator) {
      if (!(this_present_comparator && that_present_comparator))
        return false;
      if (!this.comparator.equals(that.comparator))
        return false;
    }

    boolean this_present_columnId = true;
    boolean that_present_columnId = true;
    if (this_present_columnId || that_present_columnId) {
      if (!(this_present_columnId && that_present_columnId))
        return false;
      if (this.columnId != that.columnId)
        return false;
    }

    boolean this_present_bit = true;
    boolean that_present_bit = true;
    if (this_present_bit || that_present_bit) {
      if (!(this_present_bit && that_present_bit))
        return false;
      if (this.bit != that.bit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Predicate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Predicate typedOther = (Predicate)other;

    lastComparison = Boolean.valueOf(isSetComparator()).compareTo(typedOther.isSetComparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comparator, typedOther.comparator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnId()).compareTo(typedOther.isSetColumnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, typedOther.columnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBit()).compareTo(typedOther.isSetBit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bit, typedOther.bit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Predicate(");
    boolean first = true;

    sb.append("comparator:");
    if (this.comparator == null) {
      sb.append("null");
    } else {
      sb.append(this.comparator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnId:");
    sb.append(this.columnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bit:");
    sb.append(this.bit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (comparator == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comparator' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'columnId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bit' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PredicateStandardSchemeFactory implements SchemeFactory {
    public PredicateStandardScheme getScheme() {
      return new PredicateStandardScheme();
    }
  }

  private static class PredicateStandardScheme extends StandardScheme<Predicate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Predicate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comparator = PredicateComparator.findByValue(iprot.readI32());
              struct.setComparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.columnId = iprot.readI16();
              struct.setColumnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.bit = iprot.readI16();
              struct.setBitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetColumnId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bit' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Predicate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.comparator != null) {
        oprot.writeFieldBegin(COMPARATOR_FIELD_DESC);
        oprot.writeI32(struct.comparator.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
      oprot.writeI16(struct.columnId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIT_FIELD_DESC);
      oprot.writeI16(struct.bit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PredicateTupleSchemeFactory implements SchemeFactory {
    public PredicateTupleScheme getScheme() {
      return new PredicateTupleScheme();
    }
  }

  private static class PredicateTupleScheme extends TupleScheme<Predicate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Predicate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.comparator.getValue());
      oprot.writeI16(struct.columnId);
      oprot.writeI16(struct.bit);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Predicate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.comparator = PredicateComparator.findByValue(iprot.readI32());
      struct.setComparatorIsSet(true);
      struct.columnId = iprot.readI16();
      struct.setColumnIdIsSet(true);
      struct.bit = iprot.readI16();
      struct.setBitIsSet(true);
    }
  }

}

